/*
 * microc
 */

import java.util.*;

COMPILER microc

Diagrama d = new Diagrama();

private void atualizarTipo(Vertex verticeAlvo, int novoTipo) {
	((VertexInfo) verticeAlvo.info).tipo = novoTipo;
}

private void definirTipoComoThen(Vertex v) {
	atualizarTipo(v, VertexInfo.THEN);
}

private void definirTipoComoElse(Vertex v) {
	atualizarTipo(v, VertexInfo.ELSE);
}

private Vertex criarVerticeConexao() {
	d.setRotulo("C");
	return d.criarVertice(VertexInfo.CONECTOR);
}

// v -> c -> ... -> foundVertex (enquanto não for CONECTOR)
private Vertex encontrarPrimeiroSucessorValido(Vertex v) {
	Vertex foundVertex = null;
	LinkedList<Vertex> sucessors = d.g.getSuccessors(v);
	for (Vertex s : sucessors) {
		int stipo = ((VertexInfo)s.info).tipo;
		return (stipo != VertexInfo.CONECTOR)
			? s
			: encontrarPrimeiroSucessorValido(s);
	}
	return foundVertex;
}

private void removerVerticesDeConexao() {
	ArrayList<Vertex> verticesDeConexaoResolvidos = new ArrayList();
	for (Vertex v : d.g.getVertices()) {
		for (Edge e : d.g.getEdges(v.name)) {
			Vertex w = e.dest;
			int wtipo = ((VertexInfo)w.info).tipo;
			if (wtipo != VertexInfo.CONECTOR) continue;

			Vertex verticeAlvoCorreto = encontrarPrimeiroSucessorValido(w);
			e.dest = verticeAlvoCorreto; // atualizar a aresta para apontar para o vértice correto
			verticesDeConexaoResolvidos.add(w); // salvar para apagar mais tarde
		}
	}

	for (Vertex w : verticesDeConexaoResolvidos) {
		d.g.delVertex(w);
	}
}

CHARACTERS
	semAspas 	= ANY - '"'.
	letra 		= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".
	digito 		= "0123456789".

TOKENS
	id 		    = letra {letra | digito}.
	strConst 	= '"' {semAspas} '"'.
	num 		  = ['-'] digito { digito } .

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS

	microc
	= {DeclConst} {Definicao} (.
		d.alcancarStop(d.ultimoVertice);
		removerVerticesDeConexao();
	.) .

	DeclConst = "const" Tipo id "=" num ";" .

	Definicao
	= ( Tipo | "void" (. d.setRotulo("start"); d.criarVertice(VertexInfo.START); .) )
	  DesigI ( DeclVar | DeclFuncao ) .

	DeclVar
	= {"," (. d.acumularToken(t, ""); .)
	  DesigI } ";" (. d.criarVertice(); .)
  .

  DeclFuncao = "(" [ Tipo DesigI {"," Tipo  DesigI	} ] ")" CBlock .

	Tipo = "int" (. d.setRotulo(t.val); .) .

	DesigI = id  (. d.acumularToken(t); .) .

	CBlock = "{" {Definicao | Instrucao} "}" .

	Instrucao (. d.setRotulo(""); .)
	= Designador ( Atrib | Parametros ) ";" (. d.criarVertice(); .)
	| While
	| For
	| IfElse
	| Return (. d.criarVertice(VertexInfo.RETURN); d.setRotulo(""); .)
	| Printf (. d.criarVertice(VertexInfo.OTHER); .)
	| Scanf  (. d.criarVertice(VertexInfo.OTHER); .)
	| CBlock
	| ";"
    .

	Atrib = "=" (. d.acumularToken(t); .) Expr .

	While
	= "while"    (. d.setRotulo(t.val); .)
	"("          (. d.acumularToken(t); .)
	Condicao ")" (. d.acumularToken(t); .)
	(.
		Vertex paiCorrente = d.criarVertice(VertexInfo.THEN);
	.) Instrucao (.
		d.linkarUltimoEAtualizar(paiCorrente);
		definirTipoComoElse(paiCorrente);
		d.setUltimoVertice(paiCorrente);
	.) .

	For
	= "for"              (. d.setRotulo(t.val); .)
	"("                  (. d.acumularToken(t); .)
	Designador Atrib ";" (. d.acumularToken(t); .)
	Condicao ";"         (. d.acumularToken(t); .)
	Designador Atrib ")" (.
		d.acumularToken(t, "");
		Vertex paiCorrente = d.criarVertice(VertexInfo.THEN);
	.)
	Instrucao (.
		d.linkarUltimoEAtualizar(paiCorrente);
		definirTipoComoElse(paiCorrente);
		d.setUltimoVertice(paiCorrente);
	.) .

	IfElse
	= "if"       (. d.setRotulo(t.val); .)
	"("          (. d.acumularToken(t); .)
	Condicao ")" (.
		d.acumularToken(t, "");
		Vertex paiCorrente = d.criarVertice(VertexInfo.THEN);
		ArrayList<Vertex> lst = new ArrayList();
	.)
	Instrucao (.
		// FIXME: não funciona pro caso: IF sem corpo e sem ELSE (ou ELSE sem corpo)
		// boolean thenTemCorpo = d.ultimoVertice != paiCorrente;
		lst.add(d.ultimoVertice);
	.)
	("else"   (. definirTipoComoElse(paiCorrente); d.setUltimoVertice(paiCorrente); .)
	Instrucao (. lst.add(d.ultimoVertice);                                          .)
	|         (. definirTipoComoElse(paiCorrente); d.setUltimoVertice(paiCorrente); .)
	) (.
		Vertex conector = criarVerticeConexao();

		for (Vertex w : lst) {
			if (w == conector) continue;
			d.setUltimoVertice(w);

			int lastVertexTipo = ((VertexInfo)d.ultimoVertice.info).tipo;
			if (d.ultimoVertice != conector && lastVertexTipo != VertexInfo.STOP) {
				int tipoPaiCorrente = ((VertexInfo)paiCorrente.info).tipo;
				if (tipoPaiCorrente == VertexInfo.ELSE) { // para garantir que não sairão duas arestas T
					definirTipoComoThen(paiCorrente);
					tipoPaiCorrente = ((VertexInfo)paiCorrente.info).tipo;
				}

				d.linkarUltimoEAtualizar(conector);
			}
		}

		int lastVertexTipo = ((VertexInfo)d.ultimoVertice.info).tipo;
		if (d.ultimoVertice != conector && lastVertexTipo != VertexInfo.STOP) {
			d.linkarUltimoEAtualizar(conector);
		}

		d.setUltimoVertice(conector);
	.) .

	Return
	= "return" (. d.setRotulo(t.val); .)
	( Expr | ) ";".

	Printf
	= "printf"     (. d.setRotulo(t.val); .)
	"("            (. d.acumularToken(t); .)
	( strConst     (. d.acumularToken(t); .)
	| Expr ) {","  (. d.acumularToken(t); .)
	( strConst     (. d.acumularToken(t); .)
	| Expr ) } ")" (. d.acumularToken(t, ""); .) ";" .

	Scanf
	= "scanf"      (. d.setRotulo(t.val); .)
	"("            (. d.acumularToken(t); .)
	Designador ")" (. d.acumularToken(t, ""); .)
	";" .

	Parametros
	= "("        (. d.acumularToken(t,""); .)
	[ Expr {","  (. d.acumularToken(t); .)
	Expr } ] ")" (. d.acumularToken(t, ""); .) .

	Condicao = Expr OpRel Expr .

	OpRel
	= ("==" | "!=" | ">" | ">=" | "<" | "<=")
	(. d.acumularToken(t); .) .

	Expr
	= ( Termo | "-" (. d.acumularToken(t); .) Termo )
	{( "+" | "-" )  (. d.acumularToken(t); .) Termo } .

	Termo
	= Fator {
		( "*" | "/" | "%" ) (. d.acumularToken(t); .)
	Fator } .

	Fator
	=  Designador [ Parametros ]
	| num  	(. d.acumularToken(t); .)
	| "("   (. d.acumularToken(t, ""); .)
	  Expr
	  ")"   (. d.acumularToken(t); .)
	.

	Designador
	= id (.
		String tokensAcumulados = d.getRotulo();
		String meio = "";
		if (tokensAcumulados.length() > 0) {
			char ultimoChar = tokensAcumulados.charAt(tokensAcumulados.length() - 1);
			meio = (ultimoChar == '(') ? "" : " ";
		}
		d.acumularToken(t, meio);
	.) .

END microc.
